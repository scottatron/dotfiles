[alias]
  ci = commit
  co = checkout
  br = branch
  st = status
  # Fix whitespace in the index while preserving a dirty tree, if
  # any.
  #
  # Assuming your index is empty, some useful variations are:
  #
  # - fix whitespace in all changes in all versioned files:
  #
  #     git add -u :/ && git fixws && git reset
  #
  # - fix whitespace in all unversioned files and in all changes in
  #   all versioned files:
  #
  #     git add --all :/ && git fixws && git reset
  #
  # Logic:
  #
  # The 'git stash save' fails if the tree is clean (instead of
  # creating an empty stash :P). So, we only 'stash' and 'pop' if
  # the tree is dirty.
  #
  # The 'git rebase --whitespace=fix HEAD~' throws away the commit
  # if it's empty, and adding '--keep-empty' prevents the whitespace
  # from being fixed. So, we first check that the index is dirty.
  #
  # Also:
  # - '(! git diff-index --quiet --cached HEAD)' is true (zero) if
  #   the index is dirty
  # - 'git diff-files --quiet `git rev-parse --show-toplevel`' is
  #   non-zero if the tree is dirty
  #
  # The 'rebase --whitespace=fix' trick is from here:
  # http://stackoverflow.com/a/19156679/470844
  fixws = !"\
    if (! git diff-index --quiet --cached HEAD); then \
      \
      git diff-files --quiet . ; \
      export NEED_TO_STASH=$? ; \
      \
      git commit -m FIXWS_SAVE_INDEX && \
      if [ 1 = $NEED_TO_STASH ] ; then git stash save FIXWS_SAVE_TREE; fi && \
      git rebase --whitespace=fix HEAD~ && \
      git reset --soft HEAD~ && \
      if [ 1 = $NEED_TO_STASH ] ; then git stash pop; fi ; \
    fi"
[core]
  autocrlf = input
[color]
  ui = true
[help]
  autocorrect = 1
[push]
 default = simple
